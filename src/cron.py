"""
Manages reading and writing cron files.
"""
from pathlib import Path
import subprocess
import re
from typing import List

CRON_FILE = Path("/etc/cron.d/kiosk")

CRON_PATTERN = re.compile(
    r'(?P<minute>\S+)\s+'
    r'(?P<hour>\S+)\s+'
    r'(?P<day>\S+)\s+'
    r'(?P<month>\S+)\s+'
    r'(?P<weekday>\S+)\s+'
    r'(?P<user>\S+)\s+'
    r'(?P<command>.+)')

CMD_DISPLAY_OFF = "DISPLAY=:0 xset dpms force off"
CMD_DISPLAY_ON = "DISPLAY=:0 xset dpms force on && xset s off && xset -dpms && xset s noblank"
CMD_REBOOT = "/sbin/shutdown -r now"

ACTION_DISPLAY_OFF = "off"
ACTION_DISPLAY_ON = "on"
ACTION_REBOOT = "reboot"

class CronFileException(Exception):
    """
    Thrown in case of any error while reading or writing a cron file.
    """

class CronFileItem():
    """
    Maps a cron file entry to an action and vice versa.
    """

    def __init__(self, action, command):
        self.__action = action
        self.__command = command

    def get_action(self):
        """
        Gets the cron files action.
        """
        return self.__action

    def get_command(self):
        """
        Gets the cron files command.
        """
        return self.__command

class CronFileRebootItem(CronFileItem):
    """
    A cron file entry for rebooting the system.
    """
    def __init__(self):
        super().__init__(ACTION_REBOOT, CMD_REBOOT)

class CronFileDisplayOnItem(CronFileItem):
    """
    A cron file entry for turning on the display.
    """
    def __init__(self):
        super().__init__(ACTION_DISPLAY_ON, CMD_DISPLAY_ON)

class CronFileDisplayOffItem(CronFileItem):
    """
    A cron file entry for turning off the display.
    """
    def __init__(self):
        super().__init__(ACTION_DISPLAY_OFF, CMD_DISPLAY_OFF)

class CronFile():
    """
    Serializes an deserializes a cron file.
    """

    def __init__(self, file:str = None):
        """
        Initializes the class and specifies the cron file.
        """
        if not file:
            file = CRON_FILE

        self._cron_file = Path(file)
        self.__command_items = {}
        self.__action_items = {}

    def add_cron_item(self, item: CronFileItem):
        """
        Register a new cron file handler.
        """
        self.__command_items[item.get_command()] = item.get_action()
        self.__action_items[item.get_action()] = item.get_command()

    def _convert_to_action(self, command:str) -> str:
        """
        Converts a shell command into an action.
        In case the shell command is unknown an exception is thrown.
        """

        command = command.strip()

        if command not in self.__command_items:
            raise CronFileException("Can't convert unknown command into an action")
        return self.__command_items[command]

    def _convert_to_command(self, action:str) -> str:
        """
        Converts a action into an shell command.
        In case the action is unknown an exception is thrown.
        """

        action = action.strip()

        if action not in self.__action_items:
            raise CronFileException(f"Can't convert unknown action {action} into a command")

        return self.__action_items[action]

    def load_jobs(self) -> List[CronFileItem]:
        """
        Loads all cron jobs from the file.
        """
        cron_jobs = []

        if not self._cron_file.exists():
            return cron_jobs

        with self._cron_file.open('r', encoding="utf-8") as file:
            for line in file:
                line = line.strip()

                # Skip comments and empty lines
                if not line:
                    continue

                if line.startswith('#'):
                    continue

                match = CRON_PATTERN.match(line)
                if not match:
                    continue

                try:
                    cron_job = {
                        "minute" : match.group('minute'),
                        "hour"  : match.group('hour'),
                        "day" : match.group('day'),
                        "month" : match.group('month'),
                        "weekday" : match.group('weekday'),            
                        "action" : self._convert_to_action(match.group('command'))
                    }

                    cron_jobs.append(cron_job)

                except CronFileException:
                    # Ignore any unknown cron commands, the file is autogenerated
                    # so this should never happen.
                    continue

        return cron_jobs

    def save_jobs(self, cron_jobs):
        """
        Writes all of the given cron jobs to the file. 
        All existing data will be overwritten.
        """

        with self._cron_file.open('w', encoding="utf-8") as file:
            file.write("# Autogenerated do not change manually.\n\n")
            for job in cron_jobs:

                job['command'] = self._convert_to_command(job["action"])

                file.write(
                    f"{job['minute']} {job['hour']} {job['day']} {job['month']} {job['weekday']} root {job['command']}\n")
            file.write("\n")

        subprocess.run(["systemctl", "restart", "cron"], check=True)
