"""
Manages reading and writing cron files.
"""
from pathlib import Path
import subprocess
import re

CRON_FILE = Path("/etc/cron.d/kiosk")

CRON_PATTERN = re.compile(
    r'(?P<minute>\S+)\s+'
    r'(?P<hour>\S+)\s+'
    r'(?P<day>\S+)\s+'
    r'(?P<month>\S+)\s+'
    r'(?P<weekday>\S+)\s+'
    r'(?P<user>\S+)\s+'
    r'(?P<command>.+)')

CMD_DISPLAY_OFF = "DISPLAY=:0 xset dpms force off"
CMD_DISPLAY_ON = "DISPLAY=:0 xset dpms force on && xset s off && xset -dpms && xset s noblank"
CMD_REBOOT = "/sbin/shutdown -r now"

ACTION_DISPLAY_OFF = "off"
ACTION_DISPLAY_ON = "on"
ACTION_REBOOT = "reboot"

class CronFileException(Exception):
    """
    Thrown in case of any error while reading or writing a cron file.
    """

class CronFile():
    """
    Serializes an deserializes a cron file.
    """

    def __init__(self):
        """
        Initializes the class and specifies the cron file.
        """
        self._cron_file = Path(CRON_FILE)

    def _convert_to_action(self, command:str) -> str:
        """
        Converts a shell command into an action.
        In case the shell command is unknown an exception is thrown.
        """

        command = command.strip()

        if command == CMD_DISPLAY_OFF:
            return ACTION_DISPLAY_OFF

        if command == CMD_DISPLAY_ON:
            return ACTION_DISPLAY_ON

        if command == CMD_REBOOT:
            return ACTION_REBOOT

        raise CronFileException("Can't convert unknown command into an action")

    def _convert_to_command(self, action:str) -> str:
        """
        Converts a action into an shell command.
        In case the action is unknown an exception is thrown.
        """

        action = action.strip()

        if action == ACTION_DISPLAY_OFF:
            return CMD_DISPLAY_OFF

        if action == ACTION_DISPLAY_ON:
            return CMD_DISPLAY_ON

        if action == ACTION_REBOOT:
            return CMD_REBOOT

        raise CronFileException(f"Can't convert unknown action {action} into a command")


    def load_jobs(self):
        """
        Loads all cron jobs from the file.
        """
        cron_jobs = []

        if not self._cron_file.exists():
            return cron_jobs

        with self._cron_file.open('r', encoding="utf-8") as file:
            for line in file:
                line = line.strip()

                # Skip comments and empty lines
                if not line:
                    continue

                if line.startswith('#'):
                    continue

                match = CRON_PATTERN.match(line)
                if not match:
                    continue

                cron_job = {
                    "minute" : match.group('minute'),
                    "hour"  : match.group('hour'),
                    "day" : match.group('day'),
                    "month" : match.group('month'),
                    "weekday" : match.group('weekday'),            
                    "action" : self._convert_to_action(match.group('command'))
                }

                cron_jobs.append(cron_job)

        return cron_jobs

    def save_jobs(self, cron_jobs):
        """
        Writes all of the given cron jobs to the file. 
        All existing data will be overwritten.
        """

        for job in cron_jobs:
            job['command'] = self._convert_to_command(job["action"])

        with self._cron_file.open('w', encoding="utf-8") as file:
            file.write("# Autogenerated do not change manually.\n\n")
            for job in cron_jobs:
                file.write(
                    f"{job['minute']} {job['hour']} {job['day']} {job['month']} {job['weekday']} root {job['command']}\n")
            file.write("\n")

        subprocess.run(["systemctl", "restart", "cron"], check=True)
