"""
Test the cron file logic.
"""

from pathlib import Path
import tempfile
import unittest
from unittest.mock import patch

from src.cron import (
    CronFile,
    CronFileException,
    CronFileRebootItem, CronFileDisplayOnItem, CronFileDisplayOffItem,
    CMD_REBOOT, CMD_DISPLAY_OFF, CMD_DISPLAY_ON,
    ACTION_REBOOT, ACTION_DISPLAY_OFF, ACTION_DISPLAY_ON)

EMPTY_CRON_FILE = ""

CRON_FILE_HEADER = ( ""
    + "# Autogenerated do not change manually.\n"
    + "\n")

DEFAULT_CRON_FILE = ( ""
    + CRON_FILE_HEADER
    + f"0 5 * * 1,2,3,4,5 root {CMD_REBOOT}\n"
    + f"0 22 * * 1,2,3,4,5 root {CMD_DISPLAY_OFF}\n"
    + f"0 22 * * 1,2,3,4,5 root {CMD_DISPLAY_ON}\n"
    + "\n")

BAD_CRON_FILE = ( ""
    + CRON_FILE_HEADER
    + "0 5 * * 1,2,3,4,5 root Unknown Command\n"
    + "\n")

GENERATED_CRON_FILE = ( ""
    + CRON_FILE_HEADER
    + '24 1 * 1 5,6 root /sbin/shutdown -r now\n'
    + '\n')

UNKNOWN_ACTION = "Some action"


class TestCronFile(unittest.TestCase):
    """
    Test the cron file logic.
    """

    def test_default_cron_file(self):
        """
        Test reading the a populated file.
        """

        with tempfile.NamedTemporaryFile(delete_on_close=False) as f:
            f.write(DEFAULT_CRON_FILE.encode("utf-8"))
            f.close()

            cron = CronFile(f.name)
            cron.add_cron_item(CronFileRebootItem())
            cron.add_cron_item(CronFileDisplayOnItem())
            cron.add_cron_item(CronFileDisplayOffItem())

            jobs = cron.load_jobs()

            self.assertEqual(len(jobs), 3)

            self.assertEqual(jobs[0]["minute"], "0")
            self.assertEqual(jobs[0]["hour"], "5")
            self.assertEqual(jobs[0]["day"], "*")
            self.assertEqual(jobs[0]["month"], "*")
            self.assertEqual(jobs[0]["weekday"], "1,2,3,4,5")
            self.assertEqual(jobs[0]["action"], ACTION_REBOOT)

            self.assertEqual(jobs[1]["minute"], "0")
            self.assertEqual(jobs[1]["hour"], "22")
            self.assertEqual(jobs[1]["day"], "*")
            self.assertEqual(jobs[1]["month"], "*")
            self.assertEqual(jobs[1]["weekday"], "1,2,3,4,5")
            self.assertEqual(jobs[1]["action"], ACTION_DISPLAY_OFF)

            self.assertEqual(jobs[2]["minute"], "0")
            self.assertEqual(jobs[2]["hour"], "22")
            self.assertEqual(jobs[2]["day"], "*")
            self.assertEqual(jobs[2]["month"], "*")
            self.assertEqual(jobs[2]["weekday"], "1,2,3,4,5")
            self.assertEqual(jobs[2]["action"], ACTION_DISPLAY_ON)

    def test_empty_cron_file(self):
        """
        Reading an empty cron file.
        """

        with tempfile.NamedTemporaryFile(delete_on_close=False) as f:
            f.write(EMPTY_CRON_FILE.encode("utf-8"))
            f.close()

            cron = CronFile(f.name)
            cron.add_cron_item(CronFileRebootItem())
            cron.add_cron_item(CronFileDisplayOnItem())
            cron.add_cron_item(CronFileDisplayOffItem())

            jobs = cron.load_jobs()

            self.assertEqual(len(jobs), 0)

    def test_read_bad_cron_file(self):
        """
        Tries reading a bad cron file.
        """

        with tempfile.NamedTemporaryFile(delete_on_close=False) as f:
            f.write(BAD_CRON_FILE.encode("utf-8"))
            f.close()

            cron = CronFile(f.name)
            cron.add_cron_item(CronFileRebootItem())
            cron.add_cron_item(CronFileDisplayOnItem())
            cron.add_cron_item(CronFileDisplayOffItem())

            jobs = cron.load_jobs()

            self.assertEqual(len(jobs), 0)

    def test_add_cron_entry(self):
        """
        Add a cron item to the cron tab.
        """

        with patch("subprocess.run") as mock_run:

            with tempfile.NamedTemporaryFile(delete_on_close=False) as f:
                f.write(EMPTY_CRON_FILE.encode("utf-8"))
                f.close()

                cron = CronFile(f.name)
                cron.add_cron_item(CronFileRebootItem())
                cron.add_cron_item(CronFileDisplayOnItem())
                cron.add_cron_item(CronFileDisplayOffItem())

                jobs = cron.load_jobs()
                self.assertEqual(len(jobs), 0)

                cron.save_jobs([{
                    "minute": "24",
                    "hour" : "1",
                    "day" : "*",
                    "month" : "1",
                    "weekday" : "5,6",
                    "action" : ACTION_REBOOT}])

                with Path(f.name).open("r", encoding="utf-8") as ff:
                    self.assertEqual(ff.read(), GENERATED_CRON_FILE)

                mock_run.assert_called_once_with(
                    ["systemctl", "restart", "cron"], check=True)

    def test_add_invalid_cron_entry(self):
        """
        Tries adding an unknown a cron item.
        """

        with tempfile.NamedTemporaryFile(delete_on_close=False) as f:
            f.write(EMPTY_CRON_FILE.encode("utf-8"))
            f.close()

            cron = CronFile(f.name)
            cron.add_cron_item(CronFileRebootItem())
            cron.add_cron_item(CronFileDisplayOnItem())
            cron.add_cron_item(CronFileDisplayOffItem())

            jobs = cron.load_jobs()
            self.assertEqual(len(jobs), 0)

            with self.assertRaises(CronFileException) as context:
                cron.save_jobs([{
                    "minute": "24",
                    "hour" : "1",
                    "day" : "*",
                    "month" : "1",
                    "weekday" : "5,6",
                    "action" : UNKNOWN_ACTION}])

            self.assertEqual(
                str(context.exception),
                f"Can't convert unknown action {UNKNOWN_ACTION} into a command")


if __name__ == '__main__':
    unittest.main()
